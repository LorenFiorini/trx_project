import type { OASDocument } from 'oas/@types/rmoas.types';
import 'isomorphic-fetch';
import Fetcher from './fetcher';
declare type CacheStore = Record<string, {
    hash: string;
    path?: string;
    original: string | OASDocument;
    title?: string;
    version?: string;
}>;
export default class Cache {
    static dir: string;
    static cacheStore: string;
    static specsCache: string;
    uri: string | OASDocument;
    uriHash: string;
    cached: false | CacheStore;
    fetcher: Fetcher;
    constructor(uri: string | OASDocument, cacheDir?: string | false);
    static getCacheHash(file: string | OASDocument): string;
    static setCacheDir(dir?: string | false): void;
    static reset(): Promise<void>;
    static validate(json: any): Promise<import("openapi-types").OpenAPI.Document<{}>>;
    isCached(): boolean;
    getCache(): CacheStore;
    get(): any;
    load(): Promise<OASDocument>;
    save(spec: OASDocument): OASDocument;
}
export {};
